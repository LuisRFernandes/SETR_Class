/** Generated by itemis CREATE code generator. */

#ifndef VENDINGMACHINE_H_
#define VENDINGMACHINE_H_

#ifdef __cplusplus
extern "C" { 
#endif

/*!
* Forward declaration for the VendingMachine state machine.
*/
typedef struct VendingMachine VendingMachine;

/*!
* Forward declaration of the data structure for the VendingMachineIface interface scope.
*/
typedef struct VendingMachineIface VendingMachineIface;

#ifdef __cplusplus
}
#endif

#include "../src/sc_types.h"
#include <string.h>

#ifdef __cplusplus
extern "C" { 
#endif 

/*! \file
Header of the state machine 'VendingMachine'.
*/

#ifndef VENDINGMACHINE_EVENTQUEUE_BUFFERSIZE
#define VENDINGMACHINE_EVENTQUEUE_BUFFERSIZE 20
#endif
#ifndef VENDINGMACHINE_IN_EVENTQUEUE_BUFFERSIZE
#define VENDINGMACHINE_IN_EVENTQUEUE_BUFFERSIZE VENDINGMACHINE_EVENTQUEUE_BUFFERSIZE
#endif
#ifndef SC_INVALID_EVENT_VALUE
#define SC_INVALID_EVENT_VALUE 0
#endif
/*! Define number of states in the state enum */
#define VENDINGMACHINE_STATE_COUNT 4

/*! Define dimension of the state configuration vector for orthogonal states. */
#define VENDINGMACHINE_MAX_ORTHOGONAL_STATES 1

/*! Define indices of states in the StateConfVector */
#define SCVI_VENDINGMACHINE_MAIN_REGION_OPERATION 0
#define SCVI_VENDINGMACHINE_MAIN_REGION_REFUND 0
#define SCVI_VENDINGMACHINE_MAIN_REGION_BUYING 0
#define SCVI_VENDINGMACHINE_MAIN_REGION_BUY_REJECTED 0


/* 
 * Enum of event names in the statechart.
 */
typedef enum  {
	VendingMachine_invalid_event = SC_INVALID_EVENT_VALUE,
	VendingMachine_botao1euro,
	VendingMachine_botao2euros,
	VendingMachine_botao3_browse,
	VendingMachine_botao4_select
} VendingMachineEventID;

/*
 * Struct that represents a single event.
 */
typedef struct {
	VendingMachineEventID name;
} vendingmachine_event;

/*
 * Queue that holds the raised events.
 */
typedef struct vendingmachine_eventqueue_s {
	vendingmachine_event *events;
	sc_integer capacity;
	sc_integer pop_index;
	sc_integer push_index;
	sc_integer size;
} vendingmachine_eventqueue;

/*! Enumeration of all states */ 
typedef enum
{
	VendingMachine_last_state,
	VendingMachine_main_region_Operation,
	VendingMachine_main_region_Refund,
	VendingMachine_main_region_Buying,
	VendingMachine_main_region_Buy_rejected
} VendingMachineStates;


/*! Type declaration of the data structure for the VendingMachineIface interface scope. */
struct VendingMachineIface
{
	sc_boolean botao1euro_raised;
	sc_boolean botao2euros_raised;
	sc_boolean botao3_browse_raised;
	sc_boolean botao4_select_raised;
	sc_integer credito;
	sc_integer produto;
};






/*! 
 * Type declaration of the data structure for the VendingMachine state machine.
 * This data structure has to be allocated by the client code. 
 */
struct VendingMachine
{
	VendingMachineStates stateConfVector[VENDINGMACHINE_MAX_ORTHOGONAL_STATES];
	VendingMachineIface iface;
	sc_boolean isExecuting;
	vendingmachine_eventqueue in_event_queue;
	vendingmachine_event in_buffer[VENDINGMACHINE_IN_EVENTQUEUE_BUFFERSIZE];
};



/*! Initializes the VendingMachine state machine data structures. Must be called before first usage.*/
extern void vendingMachine_init(VendingMachine* handle);


/*! Activates the state machine. */
extern void vendingMachine_enter(VendingMachine* handle);

/*! Deactivates the state machine. */
extern void vendingMachine_exit(VendingMachine* handle);

/*! 
Can be used by the client code to trigger a run to completion step without raising an event.
*/
extern void vendingMachine_trigger_without_event(VendingMachine* handle);



/*! Raises the in event 'botao1euro' that is defined in the default interface scope. */ 
extern void vendingMachine_raise_botao1euro(VendingMachine* handle);
/*! Raises the in event 'botao2euros' that is defined in the default interface scope. */ 
extern void vendingMachine_raise_botao2euros(VendingMachine* handle);
/*! Raises the in event 'botao3_browse' that is defined in the default interface scope. */ 
extern void vendingMachine_raise_botao3_browse(VendingMachine* handle);
/*! Raises the in event 'botao4_select' that is defined in the default interface scope. */ 
extern void vendingMachine_raise_botao4_select(VendingMachine* handle);
/*! Gets the value of the variable 'credito' that is defined in the default interface scope. */ 
extern sc_integer vendingMachine_get_credito(const VendingMachine* handle);
/*! Sets the value of the variable 'credito' that is defined in the default interface scope. */ 
extern void vendingMachine_set_credito(VendingMachine* handle, sc_integer value);
/*! Gets the value of the variable 'produto' that is defined in the default interface scope. */ 
extern sc_integer vendingMachine_get_produto(const VendingMachine* handle);
/*! Sets the value of the variable 'produto' that is defined in the default interface scope. */ 
extern void vendingMachine_set_produto(VendingMachine* handle, sc_integer value);

/*!
 * Checks whether the state machine is active (until 2.4.1 this method was used for states).
 * A state machine is active if it was entered. It is inactive if it has not been entered at all or if it has been exited.
 */
extern sc_boolean vendingMachine_is_active(const VendingMachine* handle);

/*!
 * Checks if all active states are final. 
 * If there are no active states then the state machine is considered being inactive. In this case this method returns false.
 */
extern sc_boolean vendingMachine_is_final(const VendingMachine* handle);

/*! Checks if the specified state is active (until 2.4.1 the used method for states was called isActive()). */
extern sc_boolean vendingMachine_is_state_active(const VendingMachine* handle, VendingMachineStates state);


#ifdef __cplusplus
}
#endif 

#endif /* VENDINGMACHINE_H_ */
